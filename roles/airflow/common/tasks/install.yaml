---
- name: Ensure hadoop group exists
  include_role:
    name: tosit.tdp.utils.group
  vars:
    group: "{{ airflow_group }}"

- name: Ensure airflow user exists
  include_role:
    name: tosit.tdp.utils.user
  vars:
    user: "{{ airflow_user }}"
    group: "{{ airflow_group }}"

- name: Airfloww | Ensures airflow install, certificates and configuration directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - "{{ airflow_root_dir }}/airflow-{{ airflow_version }}"
    - "{{ airflow_certs_dir }}"
    - "{{ airflow_root_conf_dir }}"

- name: Ensures log directory
  file:
    path: '{{ airflow_log_dir }}'
    state: directory
    owner: '{{ airflow_user }}'
    group: '{{ airflow_group }}'

- name: Create symbolic link to Airflow installation
  file:
    src: "{{ airflow_root_dir }}/airflow-{{ airflow_version }}"
    dest: "{{ airflow_install_dir }}"
    state: link

- name: Template Constraint file
  template:
    src: "{{ airflow_constraints_file }}.j2"
    dest: "/tmp/{{ airflow_constraints_file }}"

- name: Install Required packages
  yum:
    pkg: "{{ airflow_required_packages }}"
    state: present
  when: airflow_required_packages is defined

- name: Install virtualenv in {{ airflow_python }}
  become: true
  shell: "{{ airflow_python }} -m pip install virtualenv"

- name: Check if exists virtualenv
  stat:
    path: "{{ airflow_install_dir }}/bin"
  register: virtualenv

- name: Create a virtualenv
  shell: "virtualenv --system-site-packages -p {{ airflow_python }} {{ airflow_install_dir }}"
  when: not virtualenv.stat.exists
  environment:
    PATH: "$PATH:/usr/local/bin"

- name: upgrade virtualenv pip
  pip:
    name: pip
    extra_args: --upgrade
    virtualenv: "{{ airflow_install_dir }}"
    virtualenv_python: "{{ airflow_python }}"

- name: Install Python dependencies
  pip:
    name: "{{ airflow_required_python_packages }}"
    virtualenv: "{{ airflow_install_dir }}"
    virtualenv_python: "{{ airflow_python }}"
    extra_args: --constraint /tmp/{{ airflow_constraints_file }}
  when: airflow_required_python_packages is defined

- name: Pip install airflow {{ airflow_version }}
  pip:
    name: "apache-airflow=={{ airflow_version }}"
    virtualenv: "{{ airflow_install_dir }}"
    virtualenv_python: "{{ airflow_python }}"
    extra_args: --constraint /tmp/{{ airflow_constraints_file }}

- name: Pip install airflow extra packages
  pip:
    name: "{{ airflow_extra_packages }}"
    virtualenv: "{{ airflow_install_dir }}"
    virtualenv_python: "{{ airflow_python }}"
    extra_args: --constraint /tmp/{{ airflow_constraints_file }}
  when: airflow_extra_packages is defined