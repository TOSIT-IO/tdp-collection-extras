---
- name: Install openldap client
  package:
    name: openldap-clients

- name: Add group to LDAP
  shell: |
    ldapadd \
      -x -D {{ ldap_admin_dn }} \
      -w {{ ldap_admin_pwd }} \
      -h {{ groups['ldap'][0] | tosit.tdp.access_fqdn(hostvars) }} << EOF
    dn: cn={{ group }},{{ ldap_group_base }}
    objectClass: top
    objectClass: posixGroup
    cn: {{ group }}
    gidNumber: {{ gid }}
    EOF
  register: reg_ldapadd_user
  failed_when: |
    reg_ldapadd_user is failed and
    reg_ldapadd_user.rc != 68
  changed_when: reg_ldapadd_user.rc != 68

- name: Add user to LDAP
  shell: |
    ldapadd \
      -x -D {{ ldap_admin_dn }} \
      -w {{ ldap_admin_pwd }} \
      -h {{ groups['ldap'][0] | tosit.tdp.access_fqdn(hostvars) }} << EOF
    dn: uid={{ user }},{{ ldap_user_base }}
    uid: {{ user }}
    objectClass: posixAccount
    objectClass: inetOrgPerson
    cn: "{{ user_cn | default(user) }}"
    sn: "{{ user_sn | default(user) }}"
    uidNumber: {{ uid }}
    gidNumber: {{ gid }}
    homeDirectory: /home/{{ user }}
    loginShell: /bin/bash
    userPassword: {{ password }}
    EOF
  register: reg_ldapadd_group
  failed_when: |
    reg_ldapadd_group is failed and
    reg_ldapadd_group.rc != 68
  changed_when: reg_ldapadd_group.rc != 68

- name: Check user
  command: "id -u {{ user }}"
  changed_when: no
  register: reg_check_user

- name: Check group
  command: "id -ng {{ user }}"
  changed_when: no
  register: reg_check_group

- name: Assert that user is pulled from ldap to unix
  assert:
    that:
      - reg_check_user.stdout == (uid | string)
    success_msg: User correctly pulled from ldap
    fail_msg: User not pulled from ldap.

- name: Assert that group is pulled from ldap to unix
  assert:
    that:
      - reg_check_group.stdout == group
    success_msg: Group correctly pulled from ldap
    fail_msg: Group not pulled from ldap.

- name: Create Kerberos user
  command: |
    kadmin 
      -r {{ realm }} 
      -p {{ kadmin_principal }} 
      -w {{ kadmin_password }} 
      -q "addprinc -pw {{ password }} {{ user }}@{{ realm }}"
  register: reg_addprinc
  changed_when: "'already exists while creating' not in reg_addprinc.stderr"

- name: Get user keytab
  become_user: "{{ user }}"
  shell: |
    set timeout 10
    spawn ktutil
    expect "ktutil:"
    send "add_entry -password -p {{ user }}@{{ realm }} -k 1 -e aes256-cts-hmac-sha1-96\r"
    expect "Password for {{ user }}@{{ realm }}:"
    send "{{ password }}\r"
    expect "ktutil:"
    send "add_entry -password -p {{ user }}@{{ realm }} -k 1 -e aes128-cts-hmac-sha1-96\r"
    expect "Password for {{ user }}@{{ realm }}:"
    send "{{ password }}\r"
    expect "ktutil:"
    send "write_kt /home/{{ user }}/{{ user }}.keytab\r"
    expect "ktutil:"
    send "quit\r"
    expect eof
    exit 0
  args:
    executable: /usr/bin/expect
    creates: "/home/{{ user }}/{{ user }}.keytab"
  register: reg_ktutil

- name: Create HDFS Home
  delegate_to: "{{ groups['hdfs_nn'][0] }}"
  tosit.tdp.hdfs_file: 
    hdfs_conf: "{{ hadoop_nn_conf_dir }}"
    path: "/user/{{ user }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: "700"
    kerberos: yes
    krb_principal: "nn/{{ groups['hdfs_nn'][0] | tosit.tdp.access_fqdn(hostvars) }}@{{ realm }}"
    krb_keytab: /etc/security/keytabs/nn.service.keytab
