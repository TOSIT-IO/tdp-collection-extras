---
- name: Upload hue dist file
  copy:
    src: "files/{{ hue_dist_file }}"
    dest: /tmp
- name: Ensures {{ hue_root_dir }} exists
  file:
    path: "{{ hue_root_dir }}"
    state: directory
- name: Extract hue dist file
  unarchive:
    src: "/tmp/{{ hue_dist_file }}"
    dest: "{{ hue_root_dir }}"
    group: root
    owner: root
    remote_src: yes
    creates: "{{ hue_root_dir }}/{{ hue_release }}"
- name: Create symbolic link to Hadoop installation
  file:
    src: "{{ hue_root_dir }}/{{ hue_release }}"
    dest: "{{ hue_current_dir }}"
    state: link
- name: Create directory for pid
  file:
    path: "{{ hue_pid_dir }}"
    state: directory
    group: root
    owner: root

- include_role:
    name: tosit.tdp.utils.group
  vars:
    group: "{{ hue_group }}"

- include_role:
    name: tosit.tdp.utils.user
  vars:
    user: "{{ hue_user }}"
    group: "{{ hue_group }}"

- include_role:
    name: tosit.tdp.utils.kerberos
    tasks_from: create_principal_keytab
  vars:
    principal: "{{ hue_principal }}"
    keytab: "{{ hue_keytab }}"

- name: Ensures hue_server_conf_dir exists
  file:
    path: "{{ hue_server_conf_dir }}"
    state: directory
    owner: "{{ hue_user }}"
    group: "{{ hue_group }}"

- name: Create directory for pid
  file:
    path: '{{ hue_pid_dir }}'
    state: directory
    group: root
    owner: root

- name: Create log directory
  file:
    path: '{{ hue_log_dir }}'
    state: directory
    owner: '{{ hue_user }}'
    group: '{{ hue_group }}'
    recurse: yes

- name: Create symbolic link to Hue installation
  file:
    src: "{{ hue_install_dir }}"
    dest: "{{ hue_current_dir }}"
    state: link
    owner: "{{ hue_user }}"
    group: "{{ hue_group }}"

- name: Ensure hue user owns hue dirs
  shell: |
    chown -R {{ hue_user }}:{{ hue_group }} {{ item }}
  with_items:
    - "{{ hue_root_dir }}"
    - "/var/run/hue/"
    - "{{ hue_log_dir }}"
